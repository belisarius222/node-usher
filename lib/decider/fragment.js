/*!
 * Usher
 * Copyright(c) 2014 meltmedia <mike@meltmedia.com>
 */

'use strict';

var util = require('util'),
    events = require('events'),
    _ = require('lodash'),
    Activity = require('./tasks/activity'),
    ChildWorkflow = require('./tasks/child'),
    Loop = require('./tasks/loop'),
    Decision = require('./tasks/decision'),
    Transform = require('./tasks/transform'),
    Terminate = require('./tasks/terminate');


module.exports = Fragment;

/**
 * Represents a single, named workflow, where all activities and decisions are defined.
 * @constructor
 * @param {string} name - The name of the workflow.
 * @param {string} domain - The AWS SWF domain name to execute this workflow in.
 * @param {string} [tasklist=<name>-tasklist] - The name of the tasklist to listen for tasks on.
 */
function Fragment(name) {
  if (!(this instanceof Fragment)) {
    return new Fragment(name);
  }

  events.EventEmitter.call(this);

  if (!_.isString(name)) {
    throw new Error('A `name` is required');
  }

  this.name = name;
  this.activityOptions = {};

  /** @private */
  this._tasks = [];
}


// Make Fragment an EventEmitter
util.inherits(Fragment, events.EventEmitter);


/**
 * Get the defined tasks for the fragment
 * @returns {Array} An array of defined tasks
 */
Fragment.prototype.tasks = function tasks() {
  return this._tasks;
};


/**
 * Set global activity options for the entire workflow
 * @param {Object} options - Custom options to use for all defined activities.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.activityDefaults = function activityDefaults(options) {
  if (_.isPlainObject(options)) {
    this.activityOptions = options;
  }

  return this; // chainable
};


/**
 * Add an activity to the workflow
 * @param {string} name - The unique name of the activity.
 * @param {Array} [deps] - The names of the dependencies that must be met before this activity can execute.
 * @param {Object} [options] - Custom options for this activity.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.activity = function activity(name, deps, options) {
  if (!options && !_.isArray(deps)) {
    options = deps;
    deps = undefined;
  }
  deps = deps || [];
  options = options || {};

  options = _.defaults(options, this.activityOptions);

  var task = new Activity(name, deps, options);
  this._tasks.push(task); // Add the activity

  return this; // chainable
};


/**
 * Add an child workflow execution to the workflow
 * @param {string} name - The unique name of the child workflow.
 * @param {Array} [deps] - The names of the dependencies that must be met before this activity can execute.
 * @param {string} workflowName - The name of the workflow to execute.
 * @param {string} workflowVersion - The version of the workflow to execute.
 * @param {Object} [options] - Custom options for this activity.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.child = function child(name, deps, workflowName, workflowVersion, options) {
  if (!options && !_.isArray(deps)) {
    options = workflowVersion;
    workflowVersion = workflowName;
    workflowName = deps;
    deps = undefined;
  }
  deps = deps || [];
  options = options || {};

  var task = new ChildWorkflow(name, deps, workflowName, workflowVersion, options);
  this._tasks.push(task); // Add the child workflow

  return this; // chainable
};


/**
 * Add a looping workflow execution to the workflow
 *
 * The loop executes in batches to help alleviate rate limit exceptions.
 * The number of items to proccess per batch and the delay between batches are both configurable.
 *
 * @param {string} name - The unique name of the child workflow.
 * @param {Array} [deps] - The names of the dependencies that must be met before this activity can execute.
 * @param {Fragment} fragment - The workflow fragment to loop over. Generated by `usher.fragment()`
 * @param {Function} loopFn - A function given the taks's input that returns an array. For every item in the Array an
 *                            execution of the `fragment` workflow will execute.
 * @param {Object} [options] - Custom options for this activity. [itemsPerBatch, batchDelay]
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.loop = function loop(name, deps, fragment, loopFn, options) {
  if (!options && !_.isArray(deps)) {
    options = loopFn;
    loopFn = fragment;
    fragment = deps;
    deps = undefined;
  }
  deps = deps || [];

  var task = new Loop(name, deps, fragment, loopFn, options);
  this._tasks.push(task); // Add the loop

  return this; // chainable
};


/**
 * Add a decision to the workflow
 * @param {string} name - The unique name of the decision.
 * @param {Array} [deps] - The names of the dependencies that must be met before this decision can execute.
 * @param {Fragment~decisionLogic} decisionFn - The logic for this decision.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.decision = function decision(name, deps, decisionFn) {
  if (!decisionFn && !_.isArray(deps)) {
    decisionFn = deps;
    deps = undefined;
  }
  deps = deps || [];
  decisionFn = decisionFn || function () { return true; };

  var task = new Decision(name, deps, decisionFn);
  this._tasks.push(task); // Add the decision

  return this; // chainable
};

/**
 * The decision logic to execute when evaluating the given named decision
 * @callback Fragment~decisionLogic
 * @param {Object} input - The results of all dependencies for this decision
 * @return {Boolean} Should dependents of this decision execute
 */


/**
 * Add a termination point to the workflow
 * @param {string} name - The unique name that represents this termination point.
 * @param {Array} [deps] - The names of the dependencies that must be met before the workflow can terminate.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.terminate = function terminate(name, deps) {
  deps = deps || [];

  var task = new Terminate(name, deps);
  this._tasks.push(task); // Add the terminate task

  return this; // chainable
};


/**
 * Add a transformation to the workflow. Transformations are good for manipulating the results of prior activities into new representations for future dependents.
 * @param {string} name - The unique name of the transformation.
 * @param {Array} [deps] - The names of the dependencies that must be met before this decision can execute.
 * @param {Fragment~transformationLogic} [transformFn] - The funtion that will perform the transformation.
 * @returns {Fragment} This workflow so you can chain commands.
 */
Fragment.prototype.transform = function transform(name, deps, transformFn) {
  if (!transformFn && !_.isArray(deps)) {
    transformFn = deps;
    deps = undefined;
  }
  deps = deps || [];
  transformFn = transformFn || function (input) { return input; };

  var task = new Transform(name, deps, transformFn);
  this._tasks.push(task); // Add the transformation

  return this; // chainable
};

/**
 * The tranformation to execute
 * @callback Fragment~transformationLogic
 * @param {Object} input - The results of all dependencies for this transformation
 * @return {*} The transformed input
 */
